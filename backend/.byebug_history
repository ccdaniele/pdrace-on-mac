exit
User.create(user_params)
exit
User.create(user_params)
exit
params
exit
body
params
user_params
params.body
User.create(user_params)
params
exit
EventsUser.create(user_id:eu[:user_id], event_id:eu[:event_id])
eu[:user_id]
eu
exit
clear
test
test.symbolize_keys
test.class
test[:"user_id"]
test[:user_id]
test
test=JSON.parse(body)
body.class
exit
h = JSON.parse(ss).with_indifferent_access
ss=body
body
exit
body
ss=body
s=body
body
test[5]
test[4]
test[3]
test[2]
test.[2]
test.first
test
test.map{|u|u== u}
test
a=JSON.parse(test{:symbolize_names => true} )
test=JSON.parse(body{})
test=json.generate(body)
test=body.reject{|i| !(i.is_a?String)}
exit
test=json.generate(body)
body 
test=body.reject{|i|i.String?}
test=body.reject{|i|i.is_a? String}
test=body.reject{|i| !(i.is_a?String)}
body.reject{|i| !(i.is_a?String)}
body.delete_if {|i| !(i.is_a?String)}
body.grep(String)
eu[7]
eu[3]
eu[2]
eu.first
eu.grep_v{|l|l}
body.delete{|i| i== }
body.grep_v(){|l|l}
body.grep(Symbol)
body.grep Symbol {|l|items}
body.join(" ")
body.join(\"" )
body.join(\ )
body.join(" ")
body.join(separator = "")
body.length
body.join()
body.join
body[2]
body[1]
body[0]
body.[0]
body.[1]
body.second
body.first
body.user
body
body.symbolize_keys!
body.to_str!
body.to_str
body.keys
body
eu
exit
body[:user_id]
body
eu
exit
body
